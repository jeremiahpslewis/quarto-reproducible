[
  {
    "objectID": "index.html#motivation",
    "href": "index.html#motivation",
    "title": "Quarto & Github Actions",
    "section": "0.2 Motivation",
    "text": "0.2 Motivation\nQuarto is a promising successor to RMarkdown, in part because it isn’t tied to a specific programming language. For publishing introductory (statistics) textbooks, one often wants to show code examples in multiple programming languages (usually Python, R, and Julia) as the field (and applications) are currently split amongst them. This site demonstrates different strategies for incorporating multiple programming languages into a single book."
  },
  {
    "objectID": "index.html#example-1-crossreferencing-examples-in-other-languages",
    "href": "index.html#example-1-crossreferencing-examples-in-other-languages",
    "title": "Quarto & Github Actions",
    "section": "0.3 Example 1: Crossreferencing examples in other languages",
    "text": "0.3 Example 1: Crossreferencing examples in other languages\nWith this approach, the book is written in a main language, shown here as Python, and links to snippets in other languages are provided below each code block.\nOne advantage here is that each notebook file is dedicated to a separate programming language and can be executed in a dedicated environment. In terms of open source contributorship, it also makes ownership and maintenance responsibilities clearly separated on a per-file basis. The clear downside is that it means the book is not able to put all programming languages on equal footing and on mobile / tablet, the book will be harder to read as you will have to toggle between tabs or go forward / back between pages.\n\n0.3.1 Example: How to Plot a Figure\nSnippet from: https://quarto.org/docs/computations/python.html#code-blocks\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 1: A line plot on a polar axis\n\n\n\n\nSee Section 2.1.1 for Julia code and Section 2.1.1 for R code."
  },
  {
    "objectID": "index.html#python-and-julia-in-separate-tabs-using-python-kernel-and-julia-magic",
    "href": "index.html#python-and-julia-in-separate-tabs-using-python-kernel-and-julia-magic",
    "title": "Quarto & Github Actions",
    "section": "0.4 Python and Julia in Separate Tabs, using Python Kernel and Julia ‘Magic’",
    "text": "0.4 Python and Julia in Separate Tabs, using Python Kernel and Julia ‘Magic’\nIn this example, the book is written in multiple languages in parallel, with all languages rendered in a single Jupyter notebook, using the Python Kernel and pyjulia extension (or other extensions like rpy2 as necessary). The clear downsides here are that non-Python code is called through Python, debugging is more difficult, and reproducibility is diminished. The number of dependencies required is also unfortunately maximized.\n\nPythonJuliaR\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'}\n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 2: A line plot on a polar axis\n\n\n\n\n\n\nSee Section 2.1.1.\n\n\nSee Section 3.1.1."
  },
  {
    "objectID": "julia-supporting-material.html",
    "href": "julia-supporting-material.html",
    "title": "2  Julia Code",
    "section": "",
    "text": "Snippet from: https://quarto.org/docs/computations/julia.html#code-blocks\n\nimport IJulia\n\nfig_width = 5.5\nfig_height = 4.5\n\nfig_format = Symbol(fig_format)\n\nfig_dpi = 96\n\n# no retina format type, use svg for high quality type/marks\nif fig_format == :retina\n  fig_format = :svg\nelseif fig_format == :pdf\n  # Enable PDF support for IJulia\n  IJulia.register_mime(MIME(\"application/pdf\"))\n  fig_dpi = 96\nend\n\n# convert inches to pixels\nfig_width = fig_width * fig_dpi\nfig_height = fig_height * fig_dpi\n\n# Intialize Plots w/ default fig width/height\ntry\n  import Plots\n\n  # Plots.jl doesn't support PDF output for versions < 1.28.1\n  # so use png (if the DPI remains the default of 300 then set to 96)\n  if (Plots._current_plots_version < v\"1.28.1\") & (fig_format == :pdf)\n    Plots.gr(size=(fig_width / fig_dpi * 96, fig_height / fig_dpi * 96), fmt = :png, dpi = fig_dpi)\n  else\n    Plots.gr(size=(fig_width, fig_height), fmt = fig_format, dpi = fig_dpi)\n  end\ncatch e\n  # @warn \"Plots init\" exception=(e, catch_backtrace())\nend\n\n# Initialize CairoMakie with default fig width/height\ntry\n  import CairoMakie\n  \n  CairoMakie.activate!(type = string(fig_format))\n  CairoMakie.update_theme!(resolution=(fig_width, fig_height))\ncatch e\n    # @warn \"CairoMakie init\" exception=(e, catch_backtrace())\nend\n\n\nx = range(0, 10, length=100)\ny = sin.(x)\nCairoMakie.lines(x, y)\n\n\n\n\nFigure 2.1: Covariance ellipses\n\n\n\n\n\nusing Plots\n\nplot([0; 1.0], [ 0.12000000000; 0.12000000003])\n\n\n\n\nFigure 2.2: Covariance ellipses\n\n\n\n\n\n\n\n\nusing StatsPlots\n\ncovellipse([0,2], [2 1; 1 4], n_std=2, \n           aspect_ratio=1, label=\"cov1\")\ncovellipse!([1,0], [1 -0.5; -0.5 3], \n            showaxes=true, label=\"cov2\")\n\n\n\n\nFigure 2.3: Covariance ellipses\n\n\n\n\n\n\n\n\nusing StatsPlots\n\ncovellipse([0,2], [2 1; 1 4], n_std=2, \n           aspect_ratio=1, label=\"cov1\")\ncovellipse!([1,0], [1 -0.5; -0.5 3], \n            showaxes=true, label=\"cov2\")\n\n\n\n\nFigure 2.4: Covariance ellipses\n\n\n\n\n\n\n\n\nusing StatsPlots\n\ncovellipse([0,2], [2 1; 1 4], n_std=2, \n           aspect_ratio=1, label=\"cov1\")\ncovellipse!([1,0], [1 -0.5; -0.5 3], \n            showaxes=true, label=\"cov2\")\n\n\n\n\nFigure 2.5: Covariance ellipses\n\n\n\n\n\n\n\n\nusing StatsPlots\n\ncovellipse([0,2], [2 1; 1 4], n_std=2, \n           aspect_ratio=1, label=\"cov1\")\ncovellipse!([1,0], [1 -0.5; -0.5 3], \n            showaxes=true, label=\"cov2\")\n\n\n\n\nFigure 2.6: Covariance ellipses"
  },
  {
    "objectID": "r-supporting-material.html",
    "href": "r-supporting-material.html",
    "title": "3  R Code",
    "section": "",
    "text": "Snippet from: https://quarto.org/docs/computations/julia.html#code-blocks\n\nplot(1:5, 6:10)\n\n\n\n\nFigure 3.1: Covariance ellipses\n\n\n\n\n\n\n\n\nplot(1:5, 6:10)\n\n\n\n\nFigure 3.2: Covariance ellipses\n\n\n\n\n\n\n\n\nplot(1:5, 6:10)\n\n\n\n\nFigure 3.3: Covariance ellipses"
  }
]