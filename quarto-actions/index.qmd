---
title: "Multi-Language Stats Book Demo"
author: "Jeremiah Lewis"
format:
  html:
    code-fold: false
engine: jupyter
---

## Motivation

Quarto is a promising successor to RMarkdown, in part because it isn't tied to a specific programming language. For publishing introductory (statistics) textbooks, one often wants to show code examples in multiple programming languages (usually Python, R, and Julia) as the field (and applications) are currently split amongst them. This site demonstrates different strategies for incorporating multiple programming languages into a single book.

## Example 1: Crossreferencing examples in other languages

With this approach, the book is written in a main language, shown here as Python, and links to snippets in other languages are provided below each code block.

One advantage here is that each notebook file is dedicated to a separate programming language and can be executed in a dedicated environment. In terms of open source contributorship, it also makes ownership and maintenance responsibilities clearly separated on a per-file basis. The clear downside is that it means the book is not able to put all programming languages on equal footing and on mobile / tablet, the book will be harder to read as you will have to toggle between tabs or go forward / back between pages.

```{python}

### Example: How to Plot a Figure

Snippet from: https://quarto.org/docs/computations/python.html#code-blocks

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

See @sec-ch-1-jl for Julia code and @sec-ch-1-jl for Python code.


## Python and Julia in Separate Tabs, using Python Kernel and Julia 'Magic'

In this example, the book is written in multiple languages in parallel, with all languages rendered in a single Jupyter notebook, using the Python Kernel and pyjulia extension (or other extensions like rpy2 as necessary). The clear downsides here are that non-Python code is called through Python, debugging is more difficult, and reproducibility is diminished. The number of dependencies required is also unfortunately maximized. 

::: {.panel-tabset}

## Python

```{python}
#| label: fig-polar1
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'}
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

## Julia

Add Julia example here

## R

Add R example here.

:::
